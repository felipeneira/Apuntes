NUMPY

NUMPY es una librería que contiene herramientas para trabajar mejor con números y datos
Un ejemplo de las herramientas que tiene disponible son los array, esto nos permite crear elementos multidimensionales (por ejemplo una lista de listas)
b = np.array([[1,2,3],[4,5,6]])
b
array([[1,2,3],
       [4,5,6]])

.shape sirve para saber la extensión de cada una de las dimensiones
.dtype sirve para saber que tipo de item hay dentro del array

Este tipo de construcciones admiten tanto integers como floats. En caso de ingresarse más de un tipo de datos, Numpy tratará de tratar de la forma más homogenea posible estos. (Por ejemplo convirtiendo los integers en float)

En caso de saber la forma de un array o la cantidad de datos podemos crear un array vacío que inicie con 0 o 1, por ejemplo un array que contenga 0:

d = np.zeros((3,4))
print(d)

[[0. 0. 0. 0.]
 [0. 0. 0. 0.]
 [0. 0. 0. 0.]]

 También se pueden generar arrays con números randoms, esto con la función np.random.rand(x,y), donde x e y son los valores de las dimensiones

 con la función .arange() se puede crear una secuencia de ńúmeros, esta toma 3 argumentos que son el numero en que inicia, el numero en que termina y el incremento
 f = np.arange(12,24,2)
 array([12, 14, 16, 18, 20, 22])

También se puede utilizar .linspace() para crear una secuencia de floats con un número determinado de iteraciones, en este caso el tercer número indica la cantidad de números que aparecerán en el array (esto de forma estructurada)

np.linspace(0,2,10)

array([0.        , 0.22222222, 0.44444444, 0.66666667, 0.88888889,
       1.11111111, 1.33333333, 1.55555556, 1.77777778, 2.        ])

Con los arrays podemos hacer diferentes operaciones matemáticas o bien usar valores binarios (Booleanos). También podemos usar manipulación de matrices como product, transpose, inverse, 

a = np.array([1,2,3,4])
b = np.array([10,20,30,40])
c = a*b
c
array([ 10,  40,  90, 160])

Para hacer las operaciones estos elementos se tratan como un todo, por ejemplo si multiplico todos los valores de a por algún número, debo poner el nombre del array y no un ciclo for que multiplique por cada dato:

a*2
array([2, 4, 6, 8])

esto también funciona con los booleanos:

b>20
array([False, False,  True,  True])

========================================================================================

Otro ejemplo es la multiplicación de matrices, la que se señala con el símbolo @:

a = np.array([[1,1],[0,1]])
b = np.array([[2,0],[3,4]])

a@b
array([[5, 4],
       [3, 4]])

========================================================================================

Los arrays de Numpy poseen también funciones de lista, como por ejemplo sum(), max(), min() y mean()

Otra función importante es .reshape(), que nos permite darle una forma determinada a un array ya existente

b = np.arange(1,16,1)
b
array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])

b.reshape(3,5)
array([[ 1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10],
       [11, 12, 13, 14, 15]])

========================================================================================
En los arrays multidimensionales se pueden llamar datos específicos utilizando para esto los paréntesis cuadrados, dentro de estos el primer número será para seleccionar las filas y el segundo para seleccionar las columnas.

a[:2]
array([[1,2,3,4],
       [5,6,7,8]])
En este ejemplo se llaman ambas filas (se llaman los elementos desde el 0 y el 1, siendo el 2 excluido)

a[:2, 1:3]
array([[2,3],
       [6,7]])
Mientras que en este ejemplo se llaman las dos primeras filas y únicamente los valores de la segunda y tercera columna (1 corresponde a la segunda columna, mientras que 0 a la primera; además el segundo número pone el límite e indica el número anterior que en este caso es 2, la tercera columna)

Existe un truco para poder expresar los datos en columnas de formas distintas, dependiendo de las necesidates. De esta forma si utilizamos el array específicando únicamente el index de la columna esta tendrá una presentacion horizontal, mientras que si utilizamos un rango esta tendrá una representación vertical, en formato de columna.

ejemplo[:,0]         --> representación horizontal
ejemplo[:,0:1]       --> representación vertical

Además, en caso de querer sacar columnas no consecutivas podemos dejar en blanco el espacio de las filas e ingresar las columnas necesarias separadas por una coma dentro de corchetes cuadrados

ejemplo[:,[0,2,4]]
Esto imprimiría la primera, tercera y cuarta columna del array

========================================================================================
En numpy existe la función genfromtxt(), que consiste en una forma de abrir datos, poniénolos como un array. En esta función va en primer lugar el texto, luego el delimitador de los datos (opcional) y la cantidad de filas para saltar (en caso de existir una cabecera).

========================================================================================

El investigador condiciona los booleanos con, puede resultar muy útil para la representación de datos:
print(nombre_del_array[nombre_del_array['nombre de la columna']> 0.8]['nombre_la_columna_con_la_variable_subordinada'].mean())